// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package generated

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getChatRoomById = `-- name: GetChatRoomById :one
SELECT id, name, created_at, modified_at FROM chat_rooms WHERE id = $1
`

func (q *Queries) GetChatRoomById(ctx context.Context, id uuid.UUID) (ChatRoom, error) {
	row := q.db.QueryRow(ctx, getChatRoomById, id)
	var i ChatRoom
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getChatRoomDetailsByUsername = `-- name: GetChatRoomDetailsByUsername :many
SELECT  members.chat_room_id, chat_rooms.name FROM users
  INNER JOIN members on members.user_id = users.id
  INNER JOIN chat_rooms on chat_rooms.id = members.chat_room_id
  WHERE users.username = $1
`

type GetChatRoomDetailsByUsernameRow struct {
	ChatRoomID uuid.UUID
	Name       string
}

func (q *Queries) GetChatRoomDetailsByUsername(ctx context.Context, userName string) ([]GetChatRoomDetailsByUsernameRow, error) {
	rows, err := q.db.Query(ctx, getChatRoomDetailsByUsername, userName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChatRoomDetailsByUsernameRow
	for rows.Next() {
		var i GetChatRoomDetailsByUsernameRow
		if err := rows.Scan(&i.ChatRoomID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatRoomMembers = `-- name: GetChatRoomMembers :many
SELECT members.chat_room_id, members.user_id, members.created_at, members.modified_at, users.username, chat_rooms.name as chat_room_name FROM members
  INNER JOIN users on users.id = member.user_id  INNER JOIN chat_rooms on chat_rooms.id = members.chat_room_id
  WHERE chat_rooms.id = $1
`

type GetChatRoomMembersRow struct {
	ChatRoomID   uuid.UUID
	UserID       uuid.UUID
	CreatedAt    time.Time
	ModifiedAt   time.Time
	Username     string
	ChatRoomName string
}

func (q *Queries) GetChatRoomMembers(ctx context.Context, chatRoomID uuid.UUID) ([]GetChatRoomMembersRow, error) {
	rows, err := q.db.Query(ctx, getChatRoomMembers, chatRoomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChatRoomMembersRow
	for rows.Next() {
		var i GetChatRoomMembersRow
		if err := rows.Scan(
			&i.ChatRoomID,
			&i.UserID,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.Username,
			&i.ChatRoomName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, created_at, modified_at FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const insertChatRoom = `-- name: InsertChatRoom :one
INSERT INTO chat_rooms (name, created_at, modified_at) VALUES ($1, $2, $3) returning id, name, created_at, modified_at
`

type InsertChatRoomParams struct {
	Name       string
	CreatedAt  time.Time
	ModifiedAt time.Time
}

func (q *Queries) InsertChatRoom(ctx context.Context, arg InsertChatRoomParams) (ChatRoom, error) {
	row := q.db.QueryRow(ctx, insertChatRoom, arg.Name, arg.CreatedAt, arg.ModifiedAt)
	var i ChatRoom
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const insertMember = `-- name: InsertMember :one
INSERT INTO members (chat_room_id, user_id) VALUES ($1, $2) RETURNING chat_room_id, user_id, created_at, modified_at
`

type InsertMemberParams struct {
	ChatRoomID uuid.UUID
	UserID     uuid.UUID
}

func (q *Queries) InsertMember(ctx context.Context, arg InsertMemberParams) (Member, error) {
	row := q.db.QueryRow(ctx, insertMember, arg.ChatRoomID, arg.UserID)
	var i Member
	err := row.Scan(
		&i.ChatRoomID,
		&i.UserID,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const insertMessage = `-- name: InsertMessage :one
INSERT INTO messages (id, chat_room_id ,sender_id, body, created_at, modified_at)
  VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, body, chat_room_id, sender_id, created_at, modified_at
`

type InsertMessageParams struct {
	ID         uuid.UUID
	ChatRoomID uuid.UUID
	SenderID   uuid.UUID
	Body       string
	CreatedAt  time.Time
	ModifiedAt time.Time
}

func (q *Queries) InsertMessage(ctx context.Context, arg InsertMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, insertMessage,
		arg.ID,
		arg.ChatRoomID,
		arg.SenderID,
		arg.Body,
		arg.CreatedAt,
		arg.ModifiedAt,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.ChatRoomID,
		&i.SenderID,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const insertMessageDelivery = `-- name: InsertMessageDelivery :one
INSERT INTO message_deliveries (message_id, chat_room_id, recipient_id, delivered)
  VALUES ($1, $2, $3, $4) RETURNING message_id, chat_room_id, recipient_id, delivered, created_at, modified_at
`

type InsertMessageDeliveryParams struct {
	MessageID   uuid.UUID
	ChatRoomID  uuid.UUID
	RecipientID uuid.UUID
	Delivered   bool
}

func (q *Queries) InsertMessageDelivery(ctx context.Context, arg InsertMessageDeliveryParams) (MessageDelivery, error) {
	row := q.db.QueryRow(ctx, insertMessageDelivery,
		arg.MessageID,
		arg.ChatRoomID,
		arg.RecipientID,
		arg.Delivered,
	)
	var i MessageDelivery
	err := row.Scan(
		&i.MessageID,
		&i.ChatRoomID,
		&i.RecipientID,
		&i.Delivered,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (username,  created_at, modified_at)
  VALUES ($1, $2, $3) RETURNING id, username, created_at, modified_at
`

type InsertUserParams struct {
	Username   string
	CreatedAt  time.Time
	ModifiedAt time.Time
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Username, arg.CreatedAt, arg.ModifiedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}
